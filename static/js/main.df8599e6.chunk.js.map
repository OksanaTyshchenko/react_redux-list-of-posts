{"version":3,"sources":["api/posts.ts","store/main.ts","components/PostList/PostList.tsx","api/comments.ts","store/form.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","store/index.ts","index.tsx"],"names":["BASE_URL","getUserPosts","userId","a","fetch","response","json","getPostDetails","postId","deletePost","method","LOAD_POSTS","SELECT_POST","DELETE_POST","LOAD_COMMENTS","LOAD_ONEPOST","ADD_COMMENT","REMOVE_COMMENT","actions","posts","type","comments","post","newComment","commentId","selectors","state","mainState","selectedPost","mainInitialState","mainReducer","action","filter","id","el","PostsList","useSelector","selectedPostId","dispatch","useDispatch","handleSelectedPost","useCallback","handleRemovePost","className","map","title","onClick","getPostComments","addComment","data","param","body","JSON","stringify","headers","result","ADD_USER_NAME","ADD_USER_EMAIL","CREATE_COMMENT","GET_USER_ERROR","GET_EMAIL_ERROR","GET_COMMENT_ERROR","actionsForm","name","email","comment","error","selectorsForm","formState","userName","userEmail","userError","emailError","commentError","formInitialState","formReducer","NewCommentForm","addInfo","event","target","value","Error","postNewComment","commentForCreate","onSubmit","preventDefault","trim","placeholder","onChange","required","PostDetails","useState","commentsVisible","setCommentsVisible","useEffect","postFromServer","commentsFromServer","handleRemoveComment","length","App","setUserId","dispath","reducer","combineReducers","store","createStore","composeWithDevTools","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.df8599e6.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\nexport async function getUserPosts(userId: number): Promise<Post[]> {\n  let response;\n\n  if (userId === 0) {\n    response = await fetch(`${BASE_URL}/posts`);\n  } else {\n    response = await fetch(`${BASE_URL}/posts?userId=${userId}`);\n  }\n\n  return response.json();\n}\n\nexport async function getPostDetails(postId: number | null): Promise<Post> {\n  const response = await fetch(`${BASE_URL}/posts/${postId}`);\n\n  return response.json();\n}\n\nexport function deletePost(postId: number) {\n  fetch(`${BASE_URL}/posts/${postId}`, { method: 'DELETE' });\n}\n","import { AnyAction } from 'redux';\nimport { MainState, State } from './storeTypes';\n\nconst LOAD_POSTS = 'LOAD_POSTS';\nconst SELECT_POST = 'SELECT_POST';\nconst DELETE_POST = 'DELETE_POST';\nconst LOAD_COMMENTS = 'LOAD_COMMENTS';\nconst LOAD_ONEPOST = 'LOAD_ONEPOST';\nconst ADD_COMMENT = 'ADD_COMMENT';\nconst REMOVE_COMMENT = 'REMOVE_COMMENT';\n\nexport const actions = {\n  loadPosts: (posts: Post[]) => ({ type: LOAD_POSTS, posts }),\n  selectPost: (postId: number | null) => ({ type: SELECT_POST, postId }),\n  loadComments: (comments: Commentary[]) => ({ type: LOAD_COMMENTS, comments }),\n  loadOnePost: (post: Post) => ({ type: LOAD_ONEPOST, post }),\n  addComment: (newComment: Commentary) => ({ type: ADD_COMMENT, newComment }),\n  removeComment: (commentId: number) => ({ type: REMOVE_COMMENT, commentId }),\n  deletePost: (postId: number) => ({ type: DELETE_POST, postId }),\n};\n\nexport const selectors = {\n  getPostsSelector: (state: State) => state.mainState.posts,\n  getPostIdSelector: (state: State) => state.mainState.postId,\n  getCommentsSelector: (state: State) => state.mainState.comments,\n  getSelectedPost: (state: State) => state.mainState.selectedPost,\n};\n\nconst mainInitialState: MainState = {\n  posts: [],\n  postId: null,\n  comments: [],\n  selectedPost: null,\n};\n\nconst mainReducer = (mainState = mainInitialState, action: AnyAction) => {\n  switch (action.type) {\n    case LOAD_POSTS:\n      return {\n        ...mainState,\n        posts: action.posts,\n      };\n\n    case SELECT_POST:\n      return {\n        ...mainState,\n        postId: action.postId,\n      };\n\n    case DELETE_POST:\n      return {\n        ...mainState,\n        posts: mainState.posts.filter(post => post.id !== action.postId),\n      };\n\n    case LOAD_COMMENTS:\n      return {\n        ...mainState,\n        comments: action.comments,\n      };\n\n    case LOAD_ONEPOST:\n      return {\n        ...mainState,\n        selectedPost: action.post,\n      };\n\n    case ADD_COMMENT:\n      return {\n        ...mainState,\n        comments: [...mainState.comments, action.newComment],\n      };\n\n    case REMOVE_COMMENT:\n      return {\n        ...mainState,\n        comments: mainState.comments.filter(el => el.id !== action.commentId),\n      };\n\n    default:\n      return mainState;\n  }\n};\n\nexport default mainReducer;\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deletePost } from '../../api/posts';\nimport { actions, selectors } from '../../store/main';\nimport './PostList.scss';\n\nexport const PostsList: React.FC = () => {\n  const posts = useSelector(selectors.getPostsSelector);\n  const selectedPostId = useSelector(selectors.getPostIdSelector);\n\n  const dispatch = useDispatch();\n\n  const handleSelectedPost = useCallback((postId: number) => {\n    if (selectedPostId === postId) {\n      dispatch(actions.selectPost(null));\n    } else {\n      dispatch(actions.selectPost(postId));\n    }\n  }, [selectedPostId]);\n\n  const handleRemovePost = async (postId: number) => {\n    await deletePost(postId);\n\n    dispatch(actions.deletePost(postId));\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\" data-cy=\"postDetails\">\n        {posts?.map((post) => (\n          <li className=\"PostsList__item\" key={post.id}>\n            <div>\n              <b>{`[User #${post.userId || 'no user'}]:` }</b>\n              {post.title}\n            </div>\n            <div>\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => handleSelectedPost(post.id)}\n              >\n                {selectedPostId === post.id ? 'Close' : 'Open'}\n              </button>\n              <button\n                type=\"button\"\n                className=\"PostsList__buttonDelete\"\n                onClick={() => handleRemovePost(post.id)}\n              >\n                🗑\n              </button>\n            </div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport async function getPostComments(\n  postId: number | null,\n): Promise<Commentary[]> {\n  const response = await fetch(`${BASE_URL}/comments?postId=${postId}`);\n\n  return response.json();\n}\n\nexport function removeComment(commentId: number) {\n  fetch(`${BASE_URL}/comments/${commentId}`, { method: 'DELETE' });\n}\n\ntype Data = Pick<Commentary, 'name' | 'email' | 'body' | 'postId'>;\n\nexport async function addComment(data: Data) {\n  const param = {\n    method: 'POST',\n    body: JSON.stringify(data),\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n  };\n  const result = await fetch(`${BASE_URL}/comments`, param);\n\n  return result.json();\n}\n","import { AnyAction } from 'redux';\nimport { FormState, State } from './storeTypes';\n\nconst ADD_USER_NAME = 'ADD_USER_NAME';\nconst ADD_USER_EMAIL = 'ADD_USER_EMAIL';\nconst CREATE_COMMENT = 'CREATE_COMMENT';\nconst GET_USER_ERROR = 'GET_USER_ERROR';\nconst GET_EMAIL_ERROR = 'GET_EMAIL_ERROR';\nconst GET_COMMENT_ERROR = 'GET_COMMENT_ERROR';\n\nexport const actionsForm = {\n  addUserName: (name: string) => ({ type: ADD_USER_NAME, name }),\n  addUserEmail: (email: string) => ({ type: ADD_USER_EMAIL, email }),\n  createComment: (comment: string) => ({ type: CREATE_COMMENT, comment }),\n  getUserError: (error: string | null) => ({ type: GET_USER_ERROR, error }),\n  getEmailError: (error: string | null) => ({ type: GET_EMAIL_ERROR, error }),\n  getCommentError: (error: string | null) => (\n    { type: GET_COMMENT_ERROR, error }\n  ),\n};\n\nexport const selectorsForm = {\n  userNameSelector: (state: State) => state.formState.userName,\n  userEmailSelector: (state: State) => state.formState.userEmail,\n  newCommentSelector: (state: State) => state.formState.newComment,\n  userErrorSelector: (state: State) => state.formState.userError,\n  emailErrorSelector: (state: State) => state.formState.emailError,\n  commentErrorSelector: (state: State) => state.formState.commentError,\n};\n\nconst formInitialState: FormState = {\n  userName: '',\n  userEmail: '',\n  newComment: '',\n  userError: null,\n  emailError: null,\n  commentError: null,\n};\n\nconst formReducer = (formState = formInitialState, action: AnyAction) => {\n  switch (action.type) {\n    case ADD_USER_NAME:\n      return {\n        ...formState,\n        userName: action.name,\n      };\n\n    case ADD_USER_EMAIL:\n      return {\n        ...formState,\n        userEmail: action.email,\n      };\n\n    case CREATE_COMMENT:\n      return {\n        ...formState,\n        newComment: action.comment,\n      };\n\n    case GET_USER_ERROR:\n      return {\n        ...formState,\n        userError: action.error,\n      };\n\n    case GET_EMAIL_ERROR:\n      return {\n        ...formState,\n        emailError: action.error,\n      };\n\n    case GET_COMMENT_ERROR:\n      return {\n        ...formState,\n        commentError: action.error,\n      };\n\n    default:\n      return formState;\n  }\n};\n\nexport default formReducer;\n","import React, { ChangeEvent, SyntheticEvent } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './NewCommentForm.scss';\nimport { addComment } from '../../api/comments';\n\nimport { selectors, actions } from '../../store/main';\nimport { selectorsForm, actionsForm } from '../../store/form';\n\nexport const NewCommentForm: React.FC = () => {\n  const userName = useSelector(selectorsForm.userNameSelector);\n  const userEmail = useSelector(selectorsForm.userEmailSelector);\n  const newComment = useSelector(selectorsForm.newCommentSelector);\n  const userError = useSelector(selectorsForm.userErrorSelector);\n  const emailError = useSelector(selectorsForm.emailErrorSelector);\n  const commentError = useSelector(selectorsForm.commentErrorSelector);\n\n  const postId = useSelector(selectors.getPostIdSelector);\n\n  const dispatch = useDispatch();\n\n  const addInfo = (event:\n  ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { value, name } = event.target;\n\n    switch (name) {\n      case 'name':\n        dispatch(actionsForm.addUserName(value));\n        dispatch(actionsForm.getUserError(null));\n        break;\n\n      case 'email':\n        dispatch(actionsForm.addUserEmail(value));\n        dispatch(actionsForm.getEmailError(null));\n        break;\n\n      case 'body':\n        dispatch(actionsForm.createComment(value));\n        dispatch(actionsForm.getCommentError(null));\n        break;\n\n      default:\n        throw new Error('error');\n    }\n  };\n\n  const validate = () => {\n    if (!userName.trim()) {\n      dispatch(actionsForm.getUserError('Please enter your name'));\n\n      return false;\n    }\n\n    if (!userEmail.trim()) {\n      dispatch(actionsForm.getEmailError('Please enter your email'));\n\n      return false;\n    }\n\n    if (!newComment.trim()) {\n      dispatch(actionsForm.getCommentError('Please enter your comment'));\n\n      return false;\n    }\n\n    return true;\n  };\n\n  const postNewComment = async () => {\n    const commentForCreate = {\n      postId,\n      name: userName,\n      email: userEmail,\n      body: newComment,\n    };\n\n    const result = await addComment(commentForCreate);\n\n    dispatch(actions.addComment(result));\n  };\n\n  const submitForm = (event: SyntheticEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (validate()) {\n      postNewComment();\n\n      dispatch(actionsForm.addUserName(''));\n      dispatch(actionsForm.addUserEmail(''));\n      dispatch(actionsForm.createComment(''));\n      dispatch(actionsForm.getUserError(null));\n      dispatch(actionsForm.getEmailError(null));\n      dispatch(actionsForm.getCommentError(null));\n    }\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={submitForm}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={userName}\n          onChange={addInfo}\n        />\n      </div>\n      {userError && <p className=\"Form__error\">{userError}</p>}\n\n      <div className=\"form-field\">\n        <input\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={userEmail}\n          onChange={addInfo}\n          required\n        />\n      </div>\n      {emailError && <p className=\"Form__error\">{emailError}</p>}\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={newComment}\n          onChange={addInfo}\n        />\n      </div>\n      {commentError && <p className=\"Form__error\">{commentError}</p>}\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { NewCommentForm } from '../NewCommentForm/NewCommentForm';\n\nimport { getPostDetails } from '../../api/posts';\nimport { getPostComments, removeComment } from '../../api/comments';\n\nimport { actions, selectors } from '../../store/main';\nimport './PostDetails.scss';\n\nexport const PostDetails: React.FC = () => {\n  const [commentsVisible, setCommentsVisible] = useState(false);\n  const selectedPostId = useSelector(selectors.getPostIdSelector);\n  const post = useSelector(selectors.getSelectedPost);\n  const comments = useSelector(selectors.getCommentsSelector);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    async function result() {\n      const postFromServer = await getPostDetails(selectedPostId);\n      const commentsFromServer = await getPostComments(selectedPostId);\n\n      dispatch(actions.loadOnePost(postFromServer));\n      dispatch(actions.loadComments(commentsFromServer));\n    }\n\n    result();\n  }, [selectedPostId]);\n\n  const handleRemoveComment = async (id: number) => {\n    await removeComment(id);\n\n    dispatch(actions.removeComment(id));\n  };\n\n  return (\n    <div className=\"PostDetails\" data-cy=\"postDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{post?.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {comments.length > 0 && (\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => setCommentsVisible(state => !state)}\n          >\n            {commentsVisible\n              ? `Hide ${comments.length} comments`\n              : `Show ${comments.length} comments`}\n          </button>\n        )}\n\n        {commentsVisible && (\n          <ul className=\"PostDetails__list\">\n            {comments.map((comment) => (\n              <li className=\"PostDetails__list-item\" key={comment.id}>\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => handleRemoveComment(comment.id)}\n                >\n                  X\n                </button>\n                <p>{comment.body}</p>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import { useEffect, useState, ChangeEvent } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUserPosts } from './api/posts';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { PostsList } from './components/PostList/PostList';\nimport { PostDetails } from './components/PostDetails/PostDetails';\nimport { selectors, actions } from './store/main';\n\nconst App = () => {\n  const selectedPostId = useSelector(selectors.getPostIdSelector);\n  const [userId, setUserId] = useState(0);\n\n  const dispath = useDispatch();\n\n  useEffect(() => {\n    async function result() {\n      const postFromServer = await getUserPosts(userId);\n\n      dispath(actions.loadPosts(postFromServer));\n    }\n\n    result();\n  }, [userId]);\n\n  const selectUser = (event: ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    setUserId(+value);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={selectUser}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId && <PostDetails />}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { createStore, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport formReducer from './form';\nimport mainReducer from './main';\n\nconst reducer = combineReducers({\n  mainState: mainReducer,\n  formState: formReducer,\n});\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(),\n);\n\nexport default store;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport store from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}